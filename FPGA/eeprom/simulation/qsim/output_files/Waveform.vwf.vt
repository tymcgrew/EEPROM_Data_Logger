// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2020 15:44:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          eeprom
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module eeprom_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg din;
reg rst;
reg treg_sdata;
// wires                                               
wire adcclock;
wire cs;
wire done;
wire dout;
wire [31:0] samplecounter;
wire sclk;
wire sdata;

// assign statements (if any)                          
assign sdata = treg_sdata;
eeprom i1 (
// port map - connection between master ports and signals/registers   
	.adcclock(adcclock),
	.clk(clk),
	.cs(cs),
	.din(din),
	.done(done),
	.dout(dout),
	.rst(rst),
	.samplecounter(samplecounter),
	.sclk(sclk),
	.sdata(sdata)
);
initial 
begin 
#100000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// din
initial
begin
	din = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #1920000 1'b1;
end 

// sdata
initial
begin
	treg_sdata = 1'bZ;
end 
endmodule

