module startcon(clk, rst, sdata, sclk);

input clk, rst;
output reg sclk;
inout reg sdata;
wire sclk_internal;

downclock downclock1(clk, sclk_internal, rst);

//------------------------------------------------------------------
//                  -- State & Reg Declarations  --                   
//------------------------------------------------------------------

parameter RESET = 2'd0,
          WAIT = 2'd1,
          DROP = 2'd2,
          STOP = 2'd3;

reg [1:0]STATE, NEXT_STATE;
reg [31:0] counter;


//------------------------------------------------------------------
//                 -- Begin Declarations & Coding --                  
//------------------------------------------------------------------

always@(posedge clk or negedge rst)     // Determine STATE
begin

	if (rst == 1'b0)
		STATE <= RESET;
	else
		STATE <= NEXT_STATE;

end


always@(*)                              // Determine NEXT_STATE
begin
	case(STATE)

	RESET:
	begin
		if (rst == 1'b1)
			NEXT_STATE = WAIT;
		else
			NEXT_STATE = RESET;
	end

	WAIT:
	begin
		NEXT_STATE = (counter < 32'd16)? WAIT : DROP;
	end

	DROP:
	begin
		NEXT_STATE = (counter >= 32'd31)? STOP : DROP;
	end
	
	STOP:
	begin
		NEXT_STATE = STOP;
	end

	default:
	begin
		NEXT_STATE = STOP;
	end

	endcase
end


always@(posedge clk or negedge rst)     // Determine outputs
begin

	if (rst == 1'b0)
	begin
		sdata <= 1'bz;
		counter <= 32'd0;
		sclk <= 1'b0;
	end

	else
	begin
		sclk <= sclk_internal;
	
		case(STATE)

		RESET:
		begin
			sdata <= 1'bz;
			counter <= 32'd0;
		end

		WAIT:
		begin
			counter <= counter + 32'd1;
			sdata <= 1'b1;
		end

		DROP:
		begin
			counter <= counter + 32'd1;
			sdata <= 1'b0;
		end
		
		STOP:
		begin
			sdata <= 1'bz;
			counter <= 32'd0;
		end

		endcase
	end

end
endmodule